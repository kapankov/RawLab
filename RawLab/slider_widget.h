/*!
	\file slider_widget.h
	\brief Header file with SliderWidget class (custom widget with special slider and QLineEdit)
	\details SliderWidget allows you to conveniently and quickly edit settings and other values 
	with the slider and single-line editor..
	Features:
		1. ѕредусмотрено значение по умолчанию
			ƒвойной клик на надписи р€дом со слайдером (слева от слайдера) сбрасывает текущее 
			значение на значение по умолчанию
		2. –едактор
			 лик курсора на текущем значении (справа от слайдера) показывает однострочный редактор.
			¬вод нового значени€ происходит при нажатии клавиши Enter или потере фокуса в редакторе
			ќтказатьс€ от ввода можно нажав клавишу Escape
		3. ѕоказываютс€ подсказки (раскрываетс€ смысл надписи, диапазон и значение по умолчанию) 
			при наведении мышью на область надписи и остальную область виджета
		4. ƒиапазон значений, точность (количество знаков после зап€той) и значение по умолчани 
			задаетс€ при создании виджета, а также через контектное меню

	\authors Konstantin A. Pankov, explorus@mail.ru
	\copyright Copyright 2017-2019 Konstantin A. Pankov. All rights reserved.
	\license This project is released under the LGPL v.3
	\version 0.1
	\date 01/06/2019
	\warning In developing. Not a stable tested code.
	...

*/
#ifndef SLIDER_WIDGET_H
#define SLIDER_WIDGET_H

#include <QObject>

class SliderDoubleValidator : public QDoubleValidator
{
public:
	SliderDoubleValidator(double bottom, double top, int decimals, QObject *parent = 0)
		:QDoubleValidator(bottom, top, decimals, parent) 
	{
		setLocale(QLocale(QLocale::English, QLocale::UnitedStates));
	};
	QValidator::State validate(QString &input, int &pos) const
	{
		/*
		 * Original Qt Documentation:
		 * ---------
		 * QDoubleValidator::validate()
		 * Returns Intermediate if input contains a double that is
		 * outside the range or is in the wrong format; e.g. with too many
		 * digits after the decimal point or is empty.
		 * ---------
		 * Problem: Not what the user expects.
		 * Example: Range 0.0-10.0 with 1 digit (QDoubleValidator( 0, 10, 1, parent ) ):
		 * QDoubleValidator::validate() reports intermediate for "10.3".
		 * However we expect invalid instead and QLineEdit to decline input.
		 * Fix this by overloading the validate() operator.
		 */
		const QValidator::State origState = QDoubleValidator::validate(input, pos);
		double t = top();
		double b = bottom();
		double i = QLocale(QLocale::English, QLocale::UnitedStates).toDouble(input); // not QLocale::system()
		if ((origState == QValidator::Intermediate) && (i > t || i < b))
			return QValidator::Invalid;
		else if ((origState == QValidator::Acceptable) && input.contains(','))
			return QValidator::Invalid;
		else
			return origState;
	}
};

class SliderEditor : public QLineEdit
{
	Q_OBJECT
signals:
	void lostFocus();
	void escapePressed();
public:
	explicit SliderEditor(const QString& s, QWidget* parent = nullptr)
		: QLineEdit(s, parent) {}
private:
	void focusOutEvent(QFocusEvent* event) override
	{
		emit lostFocus();
	}

	void keyPressEvent(QKeyEvent *event)
	{
		if (event->key() == Qt::Key_Escape)
			emit escapePressed();
		else QLineEdit::keyPressEvent(event);
	}
};

class SliderWidget : public QWidget
{

	Q_OBJECT
	Q_PROPERTY(QColor BackgroundColor READ getBackgroundColor WRITE setBackgroundColor DESIGNABLE true)
	Q_PROPERTY(QColor LabelColor READ getLabelColor WRITE setLabelColor DESIGNABLE true)
	Q_PROPERTY(QColor BorderColor READ getBorderColor WRITE setBorderColor DESIGNABLE true)
	Q_PROPERTY(QColor DisabledLabelColor READ getDisabledLabelColor WRITE setDisabledLabelColor DESIGNABLE true)
	Q_PROPERTY(QColor DisabledBorderColor READ getDisabledBorderColor WRITE setDisabledBorderColor DESIGNABLE true)

	const unsigned char m_btKnob[440] = {
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x15, 0x15, 0x15, 0xFF, 0x69, 0x69, 0x69, 0xFF, 0x15, 0x15, 0x15, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x26, 0x26, 0x26, 0xFF, 0xC1, 0xC1, 0xC1, 0xFF, 0x26, 0x26, 0x26, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x22, 0x22, 0x22, 0xFF, 0xB3, 0xB3, 0xB3, 0xFF, 0xB6, 0xB6, 0xB6, 0xFF, 0xB3, 0xB3, 0xB3, 0xFF, 0x22, 0x22, 0x22, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x21, 0x21, 0x21, 0xFF, 0xAE, 0xAE, 0xAE, 0xFF, 0xAD, 0xAD, 0xAD, 0xFF, 0xB1, 0xB1, 0xB1, 0xFF, 0xAD, 0xAD, 0xAD, 0xFF, 0xAE, 0xAE, 0xAE, 0xFF, 0x21, 0x21, 0x21, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0x47, 0x47, 0x47, 0xFF, 0xA1, 0xA1, 0xA1, 0xFF, 0xAA, 0xAA, 0xAA, 0xFF, 0xAA, 0xAA, 0xAA, 0xFF, 0xAD, 0xAD, 0xAD, 0xFF, 0xAA, 0xAA, 0xAA, 0xFF, 0xAA, 0xAA, 0xAA, 0xFF, 0xA1, 0xA1, 0xA1, 0xFF, 0x47, 0x47, 0x47, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0x16, 0x16, 0x16, 0xFF, 0x69, 0x69, 0x69, 0xFF, 0x9A, 0x9A, 0x9A, 0xFF, 0xA2, 0xA2, 0xA2, 0xFF, 0xA2, 0xA2, 0xA2, 0xFF, 0xA5, 0xA5, 0xA5, 0xFF, 0xA2, 0xA2, 0xA2, 0xFF, 0xA2, 0xA2, 0xA2, 0xFF, 0x9A, 0x9A, 0x9A, 0xFF, 0x69, 0x69, 0x69, 0xFF, 0x16, 0x16, 0x16, 0xFF,
		0x17, 0x17, 0x17, 0xFF, 0x7F, 0x7F, 0x7F, 0xFF, 0x89, 0x89, 0x89, 0xFF, 0x8F, 0x8F, 0x8F, 0xFF, 0x8F, 0x8F, 0x8F, 0xFF, 0x91, 0x91, 0x91, 0xFF, 0x8F, 0x8F, 0x8F, 0xFF, 0x8F, 0x8F, 0x8F, 0xFF, 0x89, 0x89, 0x89, 0xFF, 0x7F, 0x7F, 0x7F, 0xFF, 0x17, 0x17, 0x17, 0xFF,
		0x14, 0x14, 0x14, 0xFF, 0x5D, 0x5D, 0x5D, 0xFF, 0x76, 0x76, 0x76, 0xFF, 0x7A, 0x7A, 0x7A, 0xFF, 0x7A, 0x7A, 0x7A, 0xFF, 0x7B, 0x7B, 0x7B, 0xFF, 0x7A, 0x7A, 0x7A, 0xFF, 0x7A, 0x7A, 0x7A, 0xFF, 0x76, 0x76, 0x76, 0xFF, 0x5D, 0x5D, 0x5D, 0xFF, 0x14, 0x14, 0x14, 0xFF,
		0xFF, 0xFF, 0xFF, 0x00, 0x14, 0x14, 0x14, 0xFF, 0x5D, 0x5D, 0x5D, 0xFF, 0x76, 0x76, 0x76, 0xFF, 0x7A, 0x7A, 0x7A, 0xFF, 0x7B, 0x7B, 0x7B, 0xFF, 0x7A, 0x7A, 0x7A, 0xFF, 0x76, 0x76, 0x76, 0xFF, 0x5D, 0x5D, 0x5D, 0xFF, 0x14, 0x14, 0x14, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x1C, 0x1C, 0x1C, 0xFF, 0x24, 0x24, 0x24, 0xFF, 0x25, 0x25, 0x25, 0xFF, 0x25, 0x25, 0x25, 0xFF, 0x25, 0x25, 0x25, 0xFF, 0x24, 0x24, 0x24, 0xFF, 0x1C, 0x1C, 0x1C, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00
	};

	const unsigned char m_btDsblKnob[440] = {
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x6E, 0x6E, 0x6E, 0xFF, 0x85, 0x85, 0x85, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x6E, 0x6E, 0x6E, 0xFF, 0xB9, 0xB9, 0xB9, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x6E, 0x6E, 0x6E, 0xFF, 0xB1, 0xB1, 0xB1, 0xFF, 0xB2, 0xB2, 0xB2, 0xFF, 0xB1, 0xB1, 0xB1, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x6E, 0x6E, 0x6E, 0xFF, 0xAE, 0xAE, 0xAE, 0xFF, 0xAD, 0xAD, 0xAD, 0xFF, 0xAF, 0xAF, 0xAF, 0xFF, 0xAD, 0xAD, 0xAD, 0xFF, 0xAE, 0xAE, 0xAE, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0x6E, 0x6E, 0x6E, 0xFF, 0xA7, 0xA7, 0xA7, 0xFF, 0xAC, 0xAC, 0xAC, 0xFF, 0xAC, 0xAC, 0xAC, 0xFF, 0xAD, 0xAD, 0xAD, 0xFF, 0xAC, 0xAC, 0xAC, 0xFF, 0xAC, 0xAC, 0xAC, 0xFF, 0xA7, 0xA7, 0xA7, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0x6E, 0x6E, 0x6E, 0xFF, 0x85, 0x85, 0x85, 0xFF, 0xA3, 0xA3, 0xA3, 0xFF, 0xA7, 0xA7, 0xA7, 0xFF, 0xA7, 0xA7, 0xA7, 0xFF, 0xA9, 0xA9, 0xA9, 0xFF, 0xA7, 0xA7, 0xA7, 0xFF, 0xA7, 0xA7, 0xA7, 0xFF, 0xA3, 0xA3, 0xA3, 0xFF, 0x85, 0x85, 0x85, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF,
		0x6E, 0x6E, 0x6E, 0xFF, 0x93, 0x93, 0x93, 0xFF, 0x99, 0x99, 0x99, 0xFF, 0x9D, 0x9D, 0x9D, 0xFF, 0x9D, 0x9D, 0x9D, 0xFF, 0x9D, 0x9D, 0x9D, 0xFF, 0x9D, 0x9D, 0x9D, 0xFF, 0x9D, 0x9D, 0x9D, 0xFF, 0x99, 0x99, 0x99, 0xFF, 0x93, 0x93, 0x93, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF,
		0x6E, 0x6E, 0x6E, 0xFF, 0x7D, 0x7D, 0x7D, 0xFF, 0x8D, 0x8D, 0x8D, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0x8D, 0x8D, 0x8D, 0xFF, 0x7D, 0x7D, 0x7D, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF,
		0xFF, 0xFF, 0xFF, 0x00, 0x6E, 0x6E, 0x6E, 0xFF, 0x7D, 0x7D, 0x7D, 0xFF, 0x8D, 0x8D, 0x8D, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0x8D, 0x8D, 0x8D, 0xFF, 0x7D, 0x7D, 0x7D, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x6E, 0x6E, 0x6E, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0x6E, 0x6E, 0x6E, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00
	};
	
	double m_value;	// текущее значение ползунка, должно быть между m_top и m_bottom
	double m_defvalue;	// значение по умолчанию
	double m_top;	// верхн€€ граница слайдера
	double m_bottom;	// нижн€€ граница слайдера
	int m_decimals;	// кол-во знаков после зап€той (decimals of precision)
	bool m_isCaptured; // режим сдвига ползунка (ухватили мышкой и держим)
	QString m_Label;	// надпись слева от слайдера
	SliderEditor* m_editor;	// окно QLineEdit
	SliderDoubleValidator* m_dblValidator;	// валидатор введенных значений
	// stylesheet
	QColor m_BackgroundColor;
	QColor m_LabelColor;
	QColor m_DisabledLabelColor;
	QColor m_BorderColor;
	QColor m_DisabledBorderColor;
	// 
	QColor m_GradientA;
	QColor m_GradientB;
public:
	explicit SliderWidget(QWidget* parent = 0);
	~SliderWidget();
	
	void setValue(double value);
	double getValue() const;
	void setLabel(const QString &value);
	void setGradient(const QColor& a, const QColor& b);
	void setRange(double top, double bottom, int decimals);
	void setDefaultValue(double value);

	QColor getBackgroundColor() const;
	void setBackgroundColor(const QColor& c);
	QColor getLabelColor() const;
	void setLabelColor(const QColor& c);
	QColor getDisabledLabelColor() const;
	void setDisabledLabelColor(const QColor& c);
	QColor getBorderColor() const;
	void setBorderColor(const QColor& c);
	QColor getDisabledBorderColor() const;
	void setDisabledBorderColor(const QColor& c);
signals:

public slots:
	void onEditingFinished();
	void onEscapePressed();
private:
	bool event(QEvent *event) override;
	void paintEvent(QPaintEvent* event) override;
	void mousePressEvent(QMouseEvent *event) override;
	void mouseReleaseEvent(QMouseEvent *event) override;
	void mouseDoubleClickEvent(QMouseEvent *event) override;
	void mouseMoveEvent(QMouseEvent *event) override;

	// вернуть координаты внутреннего слайдера без label и редактора
	QRect getSliderRect() const;
	// вернуть позицию от m_value
	double getPos() const;
	// вернуть позицию бегунка скролла в диапазоне 0..1
	double getPos(const QPoint& p) const;
	// сохранить value при помощи pos [0..1]
	void setValueByPos(double pos);
	// вернуть Rect редактора
	QRect getEditorRect() const;
	// вернуть строковое представление
	QString getStrValue(double value) const;
};

#endif